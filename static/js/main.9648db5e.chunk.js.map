{"version":3,"sources":["components/ContactsList/SingleRow/SingleRow.js","components/ContactsList/compareNames.js","components/ContactsList/ContactsList.js","components/SearchInput/SearchInput.js","App.js","reportWebVitals.js","index.js"],"names":["SingleRow","props","useState","isChecked","setIsChecked","personClickHandler","click","TableRow","value","TableCell","style","width","Avatar","alt","firstName","lastName","src","avatar","onClick","padding","Checkbox","checked","id","compareNames","a","b","lastNameA","last_name","lastNameB","ContactList","fetchedData","setFetchedData","toggledPeople","setToggledPeople","useEffect","fetch","then","response","json","sort","sorted","catch","error","console","log","TableContainer","component","Paper","Table","TableBody","map","person","first_name","includes","searchValue","toggledPeopleCopy","index","indexOf","splice","push","SearchInput","TextField","margin","variant","label","fullWidth","onChange","event","inputValue","target","InputProps","startAdornment","InputAdornment","position","App","setInputValue","string","charAt","toUpperCase","slice","toLowerCase","ContactsList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9648db5e.chunk.js","sourcesContent":["import { TableRow, TableCell, Checkbox, Avatar } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\n\r\nconst SingleRow = (props) => {\r\n  const [isChecked, setIsChecked] = useState(false);\r\n\r\n  const personClickHandler = () => {\r\n    setIsChecked(!isChecked);\r\n    props.click();\r\n  };\r\n  return (\r\n    <TableRow key={props.id} value={false}>\r\n      <TableCell style={{ width: 10 }}>\r\n        <Avatar\r\n          alt={props.firstName + \" \" + props.lastName}\r\n          src={props.avatar}\r\n        />\r\n      </TableCell>\r\n      <TableCell onClick={personClickHandler}>\r\n        {props.firstName} {props.lastName}\r\n      </TableCell>\r\n\r\n      <TableCell padding=\"checkbox\">\r\n        <Checkbox onClick={personClickHandler} checked={isChecked} />\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nexport default SingleRow;\r\n","export const compareNames = (a, b) => {\r\n  const lastNameA = a.last_name;\r\n  const lastNameB = b.last_name;\r\n\r\n  if (lastNameA < lastNameB) {\r\n    return -1;\r\n  }\r\n  if (lastNameB > lastNameA) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport SingleRow from \"./SingleRow/SingleRow\";\r\n\r\nimport { TableContainer, Table, TableBody, Paper } from \"@material-ui/core\";\r\n\r\nimport { compareNames } from \"./compareNames\";\r\n\r\nconst ContactList = (props) => {\r\n  const [fetchedData, setFetchedData] = useState([]);\r\n  const [toggledPeople, setToggledPeople] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const url =\r\n      \"https://teacode-recruitment-challenge.s3.eu-central-1.amazonaws.com/users.json\";\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((json) => json.sort(compareNames))\r\n      .then((sorted) => setFetchedData(sorted))\r\n      .catch((error) => {\r\n        console.error(\"fetch failed\", error);\r\n      });\r\n  }, []);\r\n\r\n  const personClickHandler = (id) => {\r\n    const toggledPeopleCopy = [...toggledPeople];\r\n\r\n    if (toggledPeopleCopy.includes(id)) {\r\n      const index = toggledPeople.indexOf(id);\r\n      toggledPeopleCopy.splice(index, 1);\r\n    } else {\r\n      toggledPeopleCopy.push(id);\r\n    }\r\n    setToggledPeople(toggledPeopleCopy);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(toggledPeople);\r\n  }, [toggledPeople]);\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableBody>\r\n          {fetchedData.map((person) => {\r\n            if (\r\n              person.first_name.includes(props.searchValue) ||\r\n              person.last_name.includes(props.searchValue)\r\n            ) {\r\n              return (\r\n                <SingleRow\r\n                  key={person.id}\r\n                  id={person.id}\r\n                  firstName={person.first_name}\r\n                  lastName={person.last_name}\r\n                  avatar={person.avatar}\r\n                  click={() => personClickHandler(person.id)}\r\n                />\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import { TextField, InputAdornment } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nconst SearchInput = (props) => {\r\n  return (\r\n    <TextField\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      label=\"Search by Name\"\r\n      fullWidth\r\n      onChange={(event) => props.inputValue(event.target.value)}\r\n      InputProps={{\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\">\r\n            <SearchIcon />\r\n          </InputAdornment>\r\n        ),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { useState } from \"react\";\n\nimport \"./App.css\";\n\nimport ContactsList from \"./components/ContactsList/ContactsList\";\nimport SearchInput from \"./components/SearchInput/SearchInput\";\n\nconst updateSizeOfLetters = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const changeHandler = (inputValue) => {\n    setInputValue(updateSizeOfLetters(inputValue));\n  };\n\n  return (\n    <>\n      <SearchInput inputValue={changeHandler} />\n      <ContactsList searchValue={inputValue} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}